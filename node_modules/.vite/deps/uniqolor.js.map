{
  "version": 3,
  "sources": ["../../uniqolor/dist/uniqolor.js"],
  "sourcesContent": ["/**\n* Generate unique and beautiful colors from any texts or numbers\n * @version v1.1.1\n * @link https://github.com/dastoori/uniqolor#README\n * @author Rasool Dastoori\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.uniqolor = factory());\n})(this, (function () { 'use strict';\n\n  function _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n      var e,\n        n,\n        i,\n        u,\n        a = [],\n        f = !0,\n        o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) return;\n          f = !1;\n        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return a;\n    }\n  }\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var SATURATION_BOUND = [0, 100];\n  var LIGHTNESS_BOUND = [0, 100];\n  var pad2 = function pad2(str) {\n    return \"\".concat(str.length === 1 ? '0' : '').concat(str);\n  };\n  var clamp = function clamp(num, min, max) {\n    return Math.max(Math.min(num, max), min);\n  };\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  var randomExclude = function randomExclude(min, max, exclude) {\n    var r = random(min, max);\n    for (var i = 0; i < (exclude === null || exclude === void 0 ? void 0 : exclude.length); i++) {\n      var value = exclude[i];\n      if ((value === null || value === void 0 ? void 0 : value.length) === 2 && r >= value[0] && r <= value[1]) {\n        return randomExclude(min, max, exclude);\n      }\n    }\n    return r;\n  };\n\n  /**\n   * Generate hashCode\n   * @param  {string} str\n   * @return {number}\n   */\n  var hashCode = function hashCode(str) {\n    var len = str.length;\n    var hash = 0;\n    for (var i = 0; i < len; i++) {\n      hash = (hash << 5) - hash + str.charCodeAt(i);\n      hash &= hash; // Convert to 32bit integer\n    }\n    return hash;\n  };\n\n  /**\n  * Clamps `num` within the inclusive `range` bounds\n  * @param  {number}       num\n  * @param  {number|Array} range\n  * @return {number}\n  */\n  var boundHashCode = function boundHashCode(num, range) {\n    if (typeof range === 'number') {\n      return range;\n    }\n    return num % Math.abs(range[1] - range[0]) + range[0];\n  };\n\n  /**\n   * Sanitizing the `range`\n   * @param  {number|Array} range\n   * @param  {Array}        bound\n   * @return {number|Array}\n   */\n  var sanitizeRange = function sanitizeRange(range, bound) {\n    if (typeof range === 'number') {\n      return clamp.apply(void 0, [Math.abs(range)].concat(_toConsumableArray(bound)));\n    }\n    if (range.length === 1 || range[0] === range[1]) {\n      return clamp.apply(void 0, [Math.abs(range[0])].concat(_toConsumableArray(bound)));\n    }\n    return [Math.abs(clamp.apply(void 0, [range[0]].concat(_toConsumableArray(bound)))), clamp.apply(void 0, [Math.abs(range[1])].concat(_toConsumableArray(bound)))];\n  };\n\n  /**\n   * @param  {number} p\n   * @param  {number} q\n   * @param  {number} t\n   * @return {number}\n   */\n  var hueToRgb = function hueToRgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    } else if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  };\n\n  /**\n   * Converts an HSL color to RGB\n   * @param  {number} h Hue\n   * @param  {number} s Saturation\n   * @param  {number} l Lightness\n   * @return {Array}\n   */\n  var hslToRgb = function hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h /= 360;\n    s /= 100;\n    l /= 100;\n    if (s === 0) {\n      // achromatic\n      r = g = b = l;\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hueToRgb(p, q, h + 1 / 3);\n      g = hueToRgb(p, q, h);\n      b = hueToRgb(p, q, h - 1 / 3);\n    }\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n  };\n\n  /**\n   * Determines whether the RGB color is light or not\n   * http://www.w3.org/TR/AERT#color-contrast\n   * @param  {number}  r               Red\n   * @param  {number}  g               Green\n   * @param  {number}  b               Blue\n   * @param  {number}  differencePoint\n   * @return {boolean}\n   */\n  var rgbIsLight = function rgbIsLight(r, g, b, differencePoint) {\n    return (r * 299 + g * 587 + b * 114) / 1000 >= differencePoint;\n  }; // eslint-disable-line max-len\n\n  /**\n   * Converts an HSL color to string format\n   * @param  {number} h Hue\n   * @param  {number} s Saturation\n   * @param  {number} l Lightness\n   * @return {string}\n   */\n  var hslToString = function hslToString(h, s, l) {\n    return \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\");\n  };\n\n  /**\n   * Converts RGB color to string format\n   * @param  {number}  r      Red\n   * @param  {number}  g      Green\n   * @param  {number}  b      Blue\n   * @param  {string}  format Color format\n   * @return {string}\n   */\n  var rgbFormat = function rgbFormat(r, g, b, format) {\n    switch (format) {\n      case 'rgb':\n        return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n      case 'hex':\n      default:\n        return \"#\".concat(pad2(r.toString(16))).concat(pad2(g.toString(16))).concat(pad2(b.toString(16)));\n    }\n  };\n\n  /**\n   * Generate unique color from `value`\n   * @param  {string|number} value\n   * @param  {Object}        [options={}]\n   * @param  {string}        [options.format='hex']\n   *  The color format, it can be one of `hex`, `rgb` or `hsl`\n   * @param  {number|Array}  [options.saturation=[50, 55]]\n   *  Determines the color saturation, it can be a number or a range between 0 and 100\n   * @param  {number|Array}  [options.lightness=[50, 60]]\n   *  Determines the color lightness, it can be a number or a range between 0 and 100\n   * @param  {number}        [options.differencePoint=130]\n   *  Determines the color brightness difference point. We use it to obtain the `isLight` value\n   *  in the output, it can be a number between 0 and 255\n   * @return {Object}\n   * @example\n   *\n   * ```js\n   * uniqolor('Hello world!')\n   * // { color: \"#5cc653\", isLight: true }\n   *\n   * uniqolor('Hello world!', { format: 'rgb' })\n   * // { color: \"rgb(92, 198, 83)\", isLight: true }\n   *\n   * uniqolor('Hello world!', {\n   *   saturation: 30,\n   *   lightness: [70, 80],\n   * })\n   * // { color: \"#afd2ac\", isLight: true }\n   *\n   * uniqolor('Hello world!', {\n   *   saturation: 30,\n   *   lightness: [70, 80],\n   *   differencePoint: 200,\n   * })\n   * // { color: \"#afd2ac\", isLight: false }\n   * ```\n   */\n  var uniqolor = function uniqolor(value) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$format = _ref.format,\n      format = _ref$format === void 0 ? 'hex' : _ref$format,\n      _ref$saturation = _ref.saturation,\n      saturation = _ref$saturation === void 0 ? [50, 55] : _ref$saturation,\n      _ref$lightness = _ref.lightness,\n      lightness = _ref$lightness === void 0 ? [50, 60] : _ref$lightness,\n      _ref$differencePoint = _ref.differencePoint,\n      differencePoint = _ref$differencePoint === void 0 ? 130 : _ref$differencePoint;\n    var hash = Math.abs(hashCode(String(value)));\n    var h = boundHashCode(hash, [0, 360]);\n    var s = boundHashCode(hash, sanitizeRange(saturation, SATURATION_BOUND));\n    var l = boundHashCode(hash, sanitizeRange(lightness, LIGHTNESS_BOUND));\n    var _hslToRgb = hslToRgb(h, s, l),\n      _hslToRgb2 = _slicedToArray(_hslToRgb, 3),\n      r = _hslToRgb2[0],\n      g = _hslToRgb2[1],\n      b = _hslToRgb2[2];\n    return {\n      color: format === 'hsl' ? hslToString(h, s, l) : rgbFormat(r, g, b, format),\n      isLight: rgbIsLight(r, g, b, differencePoint)\n    };\n  };\n\n  /**\n   * Generate random color\n   * @param  {Object}       [options={}]\n   * @param  {string}       [options.format='hex']\n   *  The color format, it can be one of `hex`, `rgb` or `hsl`\n   * @param  {number|Array} [options.saturation=[50, 55]]\n   *  Determines the color saturation, it can be a number or a range between 0 and 100\n   * @param  {number|Array} [options.lightness=[50, 60]]\n   *  Determines the color lightness, it can be a number or a range between 0 and 100\n   * @param  {number}       [options.differencePoint=130]\n   *  Determines the color brightness difference point. We use it to obtain the `isLight` value\n   *  in the output, it can be a number between 0 and 255\n   * @param  {Array}        [options.excludeHue]\n   *  Exclude certain hue ranges. For example to exclude red color range: `[[0, 20], [325, 359]]`\n   * @return {Object}\n   * @example\n   *\n   * ```js\n   * // Generate random color\n   * uniqolor.random()\n   * // { color: \"#644cc8\", isLight: false }\n   *\n   * // Generate a random color with HSL format\n   * uniqolor.random({ format: 'hsl' })\n   * // { color: \"hsl(89, 55%, 60%)\", isLight: true }\n   *\n   * // Generate a random color in specific saturation and lightness\n   * uniqolor.random({\n   *   saturation: 80,\n   *   lightness: [70, 80],\n   * })\n   * // { color: \"#c7b9da\", isLight: true }\n   *\n   * // Generate a random color but exclude red color range\n   * uniqolor.random({\n   *   excludeHue: [[0, 20], [325, 359]],\n   * })\n   * // {color: '#53caab', isLight: true}\n   * ```\n   */\n  uniqolor.random = function () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$format = _ref2.format,\n      format = _ref2$format === void 0 ? 'hex' : _ref2$format,\n      _ref2$saturation = _ref2.saturation,\n      saturation = _ref2$saturation === void 0 ? [50, 55] : _ref2$saturation,\n      _ref2$lightness = _ref2.lightness,\n      lightness = _ref2$lightness === void 0 ? [50, 60] : _ref2$lightness,\n      _ref2$differencePoint = _ref2.differencePoint,\n      differencePoint = _ref2$differencePoint === void 0 ? 130 : _ref2$differencePoint,\n      excludeHue = _ref2.excludeHue;\n    saturation = sanitizeRange(saturation, SATURATION_BOUND);\n    lightness = sanitizeRange(lightness, LIGHTNESS_BOUND);\n    var h = excludeHue ? randomExclude(0, 359, excludeHue) : random(0, 359);\n    var s = typeof saturation === 'number' ? saturation : random.apply(void 0, _toConsumableArray(saturation));\n    var l = typeof lightness === 'number' ? lightness : random.apply(void 0, _toConsumableArray(lightness));\n    var _hslToRgb3 = hslToRgb(h, s, l),\n      _hslToRgb4 = _slicedToArray(_hslToRgb3, 3),\n      r = _hslToRgb4[0],\n      g = _hslToRgb4[1],\n      b = _hslToRgb4[2];\n    return {\n      color: format === 'hsl' ? hslToString(h, s, l) : rgbFormat(r, g, b, format),\n      isLight: rgbIsLight(r, g, b, differencePoint)\n    };\n  };\n\n  return uniqolor;\n\n}));\n"],
  "mappings": "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",
  "names": ["r", "pad2", "clamp", "random", "randomExclude", "hashCode", "boundHashCode", "sanitizeRange", "hueToRgb", "hslToRgb", "rgbIsLight", "hslToString", "rgbFormat", "uniqolor"]
}
